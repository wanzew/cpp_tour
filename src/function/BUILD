load("@rules_cc//cc:defs.bzl", "cc_binary")

cc_binary(
    name = "main",
    srcs = ["main.cc"],
    deps = ["//src/lib:SolutionLib"],
)

cc_binary(
    name = "lambda_main",
    srcs = ["lambda_main.cc"],
    deps = ["//src/lib:SolutionLib"],
)

cc_binary(
    name = "lambda_stl_main",
    srcs = ["lambda_stl_main.cc"],
    deps = [
        "//src/lib:SolutionLib",
        "//src/lib:utility",
    ],
)

cc_binary(
    name = "functional_programming_main",
    srcs = ["functional_programming_main.cc"],
    deps = ["//src/lib:SolutionLib"],
)

cc_binary(
    name = "all_off_main",
    srcs = ["all_off_main.cc"],
    deps = ["//src/lib:SolutionLib"],
)

cc_binary(
    name = "advanced_transform_main",
    srcs = ["advanced_transform_main.cc"],
    deps = ["//src/lib:SolutionLib",
            "//src/lib:utility",],
)

cc_binary(
    name = "std_function",
    srcs = ["std_function.cc"],
    deps = ["//src/lib:SolutionLib",
    # "//src/lib:utility",
    ],
)

cc_binary(
    name = "transform",
    srcs = ["transform.cc"],
    deps = ["//src/lib:SolutionLib",
    "//src/lib:utility",],
)

cc_binary(
    name = "filter",
    srcs = ["filter.cc"],
    deps = ["//src/lib:SolutionLib",
            "//src/lib:utility",],
)

cc_binary(
    name = "map_main",
    srcs = ["map_main.cc"],
    deps = ["//src/lib:SolutionLib",
    "//src/lib:utility",],
)

cc_binary(
    name = "generate_main",
    srcs = ["generate_main.cc"],
    deps = ["//src/lib:SolutionLib",
    "//src/lib:utility",],
)

cc_binary(
    name = "adjacent_diff_main",
    srcs = ["adjacent_diff_main.cc"],
    deps = ["//src/lib:SolutionLib",
    "//src/lib:utility",],
)

cc_binary(
    name = "copy_if_main",
    srcs = ["copy_if_main.cc"],
    deps = ["//src/lib:SolutionLib"],
)

cc_binary(
    name = "lambda_event_class",
    srcs = ["lambda_event_class.cc"],
    deps = [
        "//src/lib:SolutionLib",
        "//src/lib:utility",
    ],
)

cc_binary(
    name = "inline",
    srcs = ["inline.cc"],
)
